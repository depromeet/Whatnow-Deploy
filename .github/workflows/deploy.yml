name: Deployment
on:
  workflow_dispatch:
  push:
    branches:
      - main
jobs:
  deploy-develop:
    name: Deploy(develop)
    runs-on: ubuntu-latest
    environment: whatnow-develop
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: create remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: mkdir -p ~/src/ubuntu

      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr
          remote_path: ~/src/ubuntu/
          remote_host: ${{ secrets.HOST }}
          remote_port: ${{ secrets.PORT }}
          remote_user: root
          remote_key: ${{ secrets.KEY }}

      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo "${{ secrets.NCP_SECRET_KEY }}" | docker login -u "${{ secrets.NCP_ACCESS_KEY }}" --password-stdin "${{ secrets.NCP_CONTAINER_REGISTRY }}"
            cd ~/src/ubuntu
            # echo "start docker-compose up"
            # sudo docker compose -f ~/src/ubuntu/docker-compose.dev.yml pull
            WHATNOW_VERSION=$(sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep 'whatnow-api' | cut -d ':' -f 2-)
            echo "::set-output name=WHATNOW_VERSION::$(docker images --format "{{.Repository}}:{{.Tag}}" | grep 'whatnow-api' | cut -d ':' -f 2-)"
            # sed -i "s/WHATNOW_VERSION=.*/WHATNOW_VERSION=$WHATNOW_VERSION/" .env
            # sudo docker compose -f ~/src/ubuntu/docker-compose.dev.yml --env-file .env up --build -d
            # echo "prune images"
            # sudo docker system prune --all -f

      - name: Notify on success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_COLOR: '#6568EA'
          SLACK_TITLE: develop ÏÑúÎ≤Ñ deploy success üéâ
          SLACK_MESSAGE: |
            "*Î∞∞Ìè¨ Î≤ÑÏ†Ñ*
            ${{ needs.deploy-develop.outputs.WHATNOW_VERSION }} 
            *Î∞∞Ìè¨ ÎÇ¥Ïó≠* 
            https://github.com/depromeet/Whatnow-Api/releases/tag/Api-v${{ needs.deploy-develop.outputs.WHATNOW_VERSION }}"

      - name: Notify on failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_COLOR: '#FF4747'
          SLACK_TITLE: develop ÏÑúÎ≤Ñ deploy fail üò≠
          SLACK_MESSAGE: |
            "*Î∞∞Ìè¨ Î≤ÑÏ†Ñ*
            ${{ needs.deploy-develop.outputs.WHATNOW_VERSION }} 
            *Î∞∞Ìè¨ ÎÇ¥Ïó≠* 
            https://github.com/depromeet/Whatnow-Api/releases/tag/Api-v${{ needs.deploy-develop.outputs.WHATNOW_VERSION }}"

#    deploy-production:
#      name: Deploy(production)
#      runs-on: ubuntu-latest
#      environment: whatnow-production
#      steps:
#        - name: checkout
#          uses: actions/checkout@master
#
#        - name: create remote directory
#          uses: appleboy/ssh-action@master
#          with:
#            host: ${{ secrets.HOST }}
#            username: root
#            key: ${{ secrets.KEY }}
#            port: ${{ secrets.PORT }}
#            script: mkdir -p ~/src/ubuntu
#
#        - name: copy source via ssh key
#          uses: burnett01/rsync-deployments@4.1
#          with:
#            switches: -avzr
#            remote_path: ~/src/ubuntu/
#            remote_host: ${{ secrets.HOST }}
#            remote_port: ${{ secrets.PORT }}
#            remote_user: root
#            remote_key: ${{ secrets.KEY }}
#
#        - name: connect ssh
#          uses: appleboy/ssh-action@master
#          with:
#            host: ${{ secrets.HOST }}
#            username: root
#            key: ${{ secrets.KEY }}
#            port: ${{ secrets.PORT }}
#            script: |
#              echo "${{ secrets.NCP_SECRET_KEY }}" | docker login -u "${{ secrets.NCP_ACCESS_KEY }}" --password-stdin "${{ secrets.NCP_CONTAINER_REGISTRY }}"
#              cd ~/src/ubuntu
#              echo "start docker-compose up"
#              sudo docker compose -f ~/src/ubuntu/docker-compose.prod.yml pull
#              sudo docker compose -f ~/src/ubuntu/docker-compose.prod.yml --env-file .env up --build -d
#              echo "prune images"
#              sudo docker system prune --all -f

